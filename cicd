I have 6 job templates I can run manually from AAP when I need to configure servers in our test and production environments. 2 job templates are used for general configuration on a Windows server. I have 2 of these because each job template is synced (via a source code branch override option in AAP) to the test and prod branches of the “general configuration” project/repository in Gitlab. 

The other 2 pairs (4 job templates in total: a pair for each environment as explained above) of templates are used for specific type of servers. For example, one pair covers IIS configurations and the other pair covers SQL Server configurations. In the past, to automate as much as possible within the AAP solution itself, I created 2 workflow templates (1 for each server type which could be SQL or IIS) that will run the test general configuration template first, the test application specific template next then run an approval node type next. If approved, the production job templates (general configuration and application specific template) are ran next to complete the workflow. 

For example, one workflow template may run the test (synced to the test branch in the “general configuration” gitlab project) general configuration job template then the test (synced to the test branch in the “SQL configuration” gitlab project) SQL server job template. An approval node runs and upon success, the production job templates (synced to the main branches of the projects the job templates connect to) runs to complete the workflow. 


My plan to introduce Gitlab CI/CD:

1. Clone the code from the main branch to create a test branch for each project I want to build a pipeline for in Gitlab. (Done)

2. Create Ansible Automation Platform job templates to run on the test branch and main branch. (Done)

3. Create 2 workflow templates (for IIS and SQL servers) in AAP which runs the respective job templates synced to the test branches first, runs an approval node, then (upon success) runs the job templates synced to the main branches. (Done)

4. Force all developers to create a “develop” branch and allow commits to the “develop” branch of the repository. 

- Could we lint the new code committed in the “develop” branch and automatically create a MR upon passing?

5. Create MR automatically (with assignee and reviewer) so changes from “develop” branch to “test” branch can be synchronized. 

6. Upon approval and changes being merged, Gitlab runner would need to execute against AAP's rest api which would then trigger the relevant test job templates (depends on the Gitlab project changes are made to that correlates to a specific job template). 

7. Job template would kick off and all servers in test branch (because the inventory files are separated by environment in a branch level) would be executed against. 

8. If the test job templates are successful, I would like to merge the changes in test branch to the main branch then the job templates that handle main branch servers would run. 

Note:
- Each job template pulls the latest code from Gitlab upon execution in AAP because I configured the project the job template is linked to, so it refreshes upon being executed. 

- All 3 projects (for the general, SQL, and IIS Ansible code is) have a main and test branch. 

What I know I need:
- Gitlab Runner
- Gitlab Executor (shell type) 
- Tower CLI installed and configure on the Gitlab server. 
- A .ci file in each Gitlab project I need a pipeline for.
